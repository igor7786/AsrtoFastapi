version: "3.9"

services:
  # FastAPI application 1
  app1:
    build:
      context: .
      dockerfile: backend/fastapi-app.dockerfile
    image: my-python-app
    container_name: my-python-app1-container
    volumes:
      - ./backend/app_db:/backend/app_db  # Shared database
      - ./backend/app_main:/backend/app_main:ro  # Read-only codebase
    networks:
      - my_network  # Use the custom network
    dns:
      - 8.8.8.8  # Use Google Public DNS
    restart: unless-stopped

  #FastAPI application 2
  app2:
    build:
      context: .
      dockerfile: backend/fastapi-app.dockerfile
    image: my-python-app
    container_name: my-python-app2-container
    volumes:
      - ./backend/app_db:/backend/app_db
      - ./backend/app_main:/backend/app_main:ro
    networks:
      - my_network  # Use the custom network
    dns:
      - 8.8.8.8  # Use Google Public DNS
    restart: unless-stopped

  #FastAPI application 3
  app3:
    build:
      context: .
      dockerfile: backend/fastapi-app.dockerfile
    image: my-python-app
    container_name: my-python-app3-container
    volumes:
      - ./backend/app_db:/backend/app_db
      - ./backend/app_main:/backend/app_main:ro
    networks:
      - my_network  # Use the custom network
    dns:
      - 8.8.8.8  # Use Google Public DNS
    restart: unless-stopped

  #My Astro app (Node.js app)
  astro-app:
    build:
      context: .
      dockerfile: ./frontend/astro-app.dockerfile  # Ensure this is the correct path to your Dockerfile
    container_name: my-astro-app-container
    volumes:
      - ./frontend:/frontend  # Mount the local frontend directory to the container for live updates
    depends_on:
      - app1
      - app2
      - app3
    networks:
      - my_network
    dns:
      - 8.8.8.8  # Use Google Public DNS
    restart: unless-stopped

  # Nginx web server (acting as a reverse proxy)
  web:
    build:
      context: .
      dockerfile: nginx/nginx-app.dockerfile
    image: my-nginx
    container_name: my-nginx-container
    ports:
      - "80:80"  # HTTP
      - "443:443"  # HTTPS
    depends_on:
      - astro-app  # Uncommented to ensure Nginx can proxy requests to the Astro app
      - n8n  # Uncommented to ensure Nginx can proxy requests to the N8n app
    networks:
      - my_network  # Use the custom network
    dns:
      - 8.8.8.8  # Use Google Public DNS
    restart: unless-stopped
  n8n:
    build:
      context: .
      dockerfile: n8n/n8n-app.dockerfile
    image: my-n8n
    container_name: my-n8n-container
    environment:
      - GENERIC_TIMEZONE=Europe/London
      - TZ=Europe/London
      - N8N_COMMUNITY_PACKAGES_ALLOW_TOOL_USAGE=true
      - NODEJS_PREFER_IPV4=true
      - N8N_PORT=5678
      - N8N_PROTOCOL=https
      - WEBHOOK_URL=https://n8n.igorfastapi.co.uk/
      - N8N_PATH=/
      - N8N_HOST=n8n.igorfastapi.co.uk
      - NODE_ENV=production
      - N8N_ENFORCE_SETTINGS_FILE_PERMISSIONS=true
      - N8N_RUNNERS_ENABLED=true
      - N8N_EXPRESS_TRUST_PROXY=true
      - N8N_PROXY_HOPS=1
      - N8N_SECURE_COOKIE=true
      - N8N_LOG_LEVEL=debug
#      - N8N_LOG_OUTPUT=console
      - N8N_ENCRYPTION_KEY=rMNQaVK1eUfq7rnAge4Ga60Tqhyam5ta


    volumes:
      - n8n_data:/home/node/.n8n
    restart: unless-stopped
    networks:
      - my_network


# Define the shared network between all containers
networks:
  my_network:
    driver: bridge
    ipam:
      config:
        - subnet: 192.168.1.0/24
          gateway: 192.168.1.1

# Define the volume shared for database persistence
volumes:
  app_db:
    driver: local
  n8n_data: