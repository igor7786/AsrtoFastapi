####gloabal git config####
git config --global user.name "User Name"
git config --global user.email "User Email"
git config --global init.defaultBranch main
git config --global code.editor "nano"
echo ~/.gitconfig -> to see the path of the file

#####…or create a new repository on the command line####
echo "# Astro-FastApi" >> README.md
git init
git add README.md
git commit -m "first commit"
git branch -M main
git remote add origin git@github.com:igor7786/Astro-FastApi.git
git push -u origin main

#########…or push an existing repository from the command line####
git remote add origin git@github.com:igor7786/Astro-FastApi.git
git branch -M main
git push -u origin main
==============================================================
Branches:
git branch -> list all branches
git branch -a -> list all branches
git branch <new-branch-name> -> create new branch
git branch -d <branch-name> -> delete branch
git checkout <branch-name> -> switch to branch
git checkout -b <new-branch-name> -> create and switch to new branch
git push -u origin <new-branch-name> -> push new branch to remote
?????

Status:
git status
git status --ignored
git log -> list commits, to exit press q
git log -1 -> last commit
git reflog

Add, remove, and modify files:
git add <file>
git rm <file>
git rm --cached <file> effectively removes the file from version control while keeping it on your local machine.
git rm --cached -r . ->Unstage All Files To remove all staged files, use:
git restore <file> -> restore file

To restore the files(only files not what inside the file):
git reset --mixed HEAD~2 ->number represent commits back
git checkout HEAD -- .
git add .
git commit -m "Restored files after unintended reset"
git push origin main --force
Commits:
git commit -m "Restored files after unintended reset"
git reset --hard HEAD^1 -> undo last commit(hard reset, deletes the commit)
git reset --soft HEAD^1 -> undo last commit(soft reset, leaves the commit intact)
git revert HEAD -> This reverts all changes made from <commit-hash> up to the current HEAD.
git reset --mixed HEAD^1 -> Mixed Reset (Keep changes in the working directory)
git checkout abc1234 -> gow to specific commit

Merge:
git checkout main
git merge <branch-name>
git add <file> -> add file if needed or optional ###
git commit
git push origin main

Specific folder:
git checkout frontend -- <path-to-folder> o pull the specific folder from the frontend branch
git commit -m "Merged specific folder from frontend branch"
git push origin main


#####scan for security issues in your codebase####
 ggshield secret scan repo /home/igor7786/PycharmProjects/PythonProject/astro+fastapi

######## IGNORE BUT KEEP CHANGES LOCALLY ########
git filter-branch --force --index-filter \
'git rm -r --cached --ignore-unmatch .env' \
--prune-empty --tag-name-filter cat -- --all

rm -rf .git/refs/original
git reflog expire --expire=now --all
git gc --prune=now --aggressive


git pull origin main --rebase


